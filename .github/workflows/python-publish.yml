name: Upload Python Package

on:
  push:
    branches:
      - master
    paths:
      - "src/simple_word_filter/__init__.py"
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  release-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_tag: ${{ steps.get_version.outputs.version_tag }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}

    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags --force

      - id: get_version
        name: Read package version
        run: |
          VERSION=$(python -c "import re, pathlib, sys; text = pathlib.Path('src/simple_word_filter/__init__.py').read_text(); match = re.search(r\"__version__\\s*=\\s*['\\\"]([^'\\\"]+)['\\\"]\", text); print(match.group(1)) if match else sys.exit('无法在 src/simple_word_filter/__init__.py 中找到 __version__ 定义')")
          VERSION=${VERSION%$'\r'}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "version_tag=v$VERSION" >> "$GITHUB_OUTPUT"

      - id: check_tag
        name: Check if tag already exists
        run: |
          if git rev-parse "${{ steps.get_version.outputs.version_tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Clean previous builds
        if: steps.check_tag.outputs.exists == 'false'
        run: rm -rf dist/ build/ *.egg-info/

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build tooling
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build release distributions
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          rm -rf dist/ build/ *.egg-info/ release-dists/ release-build/
          python -m build

      - name: Verify built version
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          ls -l dist/
          unzip -p dist/*.whl */METADATA | grep Version

      - name: Upload distributions
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version_tag }}
          body: Release for version ${{ steps.get_version.outputs.version }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    if: needs.release-build.outputs.tag_exists == 'false'
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/simple-word-filter/${{ needs.release-build.outputs.version }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: false
          verbose: true
